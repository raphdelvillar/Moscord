'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = singleSpaInferno;
var defaultOpts = {
	// required opts
	Inferno: null,
	createElement: null,
	rootComponent: null,
	domElementGetter: null
};

function singleSpaInferno(userOpts) {
	if ((typeof userOpts === 'undefined' ? 'undefined' : _typeof(userOpts)) !== 'object') {
		throw new Error('single-spa-inferno requires a configuration object');
	}

	var opts = _extends({}, defaultOpts, userOpts);

	if (!opts.Inferno) {
		throw new Error('single-spa-inferno must be passed opts.Inferno');
	}

	if (!opts.createElement) {
		throw new Error('single-spa-inferno must be passed opts.createElement');
	}

	if (!opts.rootComponent) {
		throw new Error('single-spa-inferno must be passed opts.rootComponent');
	}

	if (!opts.domElementGetter) {
		throw new Error('single-spa-inferno must be passed opts.domElementGetter function');
	}

	return {
		bootstrap: bootstrap.bind(null, opts),
		mount: mount.bind(null, opts),
		unmount: unmount.bind(null, opts)
	};
}

function bootstrap(opts) {
	return new Promise(function (resolve, reject) {
		resolve();
	});
}

function mount(opts) {
	return new Promise(function (resolve, reject) {
		opts.Inferno.render(opts.createElement(opts.rootComponent), getRootDomEl(opts));
		resolve();
	});
}

function unmount(opts) {
	return new Promise(function (resolve, reject) {
		opts.Inferno.render(null, getRootDomEl(opts)); // see https://github.com/infernojs/inferno/issues/114
		resolve();
	});
}

function getRootDomEl(opts) {
	var el = opts.domElementGetter();
	if (!el) {
		throw new Error('single-spa-inferno: domElementGetter function did not return a valid dom element');
	}

	return el;
}
//# sourceMappingURL=single-spa-inferno.js.map