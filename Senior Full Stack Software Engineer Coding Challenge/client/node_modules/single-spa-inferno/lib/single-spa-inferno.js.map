{"version":3,"sources":["../src/single-spa-inferno.js"],"names":["singleSpaInferno","defaultOpts","Inferno","createElement","rootComponent","domElementGetter","userOpts","Error","opts","bootstrap","bind","mount","unmount","Promise","resolve","reject","render","getRootDomEl","el"],"mappings":";;;;;;;;;;kBAQwBA,gB;AARxB,IAAMC,cAAc;AACnB;AACAC,UAAS,IAFU;AAGnBC,gBAAe,IAHI;AAInBC,gBAAe,IAJI;AAKnBC,mBAAkB;AALC,CAApB;;AAQe,SAASL,gBAAT,CAA0BM,QAA1B,EAAoC;AAClD,KAAI,QAAOA,QAAP,yCAAOA,QAAP,OAAoB,QAAxB,EAAkC;AACjC,QAAM,IAAIC,KAAJ,sDAAN;AACA;;AAED,KAAMC,oBACFP,WADE,EAEFK,QAFE,CAAN;;AAKA,KAAI,CAACE,KAAKN,OAAV,EAAmB;AAClB,QAAM,IAAIK,KAAJ,kDAAN;AACA;;AAED,KAAI,CAACC,KAAKL,aAAV,EAAyB;AACxB,QAAM,IAAII,KAAJ,wDAAN;AACA;;AAED,KAAI,CAACC,KAAKJ,aAAV,EAAyB;AACxB,QAAM,IAAIG,KAAJ,wDAAN;AACA;;AAED,KAAI,CAACC,KAAKH,gBAAV,EAA4B;AAC3B,QAAM,IAAIE,KAAJ,oEAAN;AACA;;AAED,QAAO;AACNE,aAAWA,UAAUC,IAAV,CAAe,IAAf,EAAqBF,IAArB,CADL;AAENG,SAAOA,MAAMD,IAAN,CAAW,IAAX,EAAiBF,IAAjB,CAFD;AAGNI,WAASA,QAAQF,IAAR,CAAa,IAAb,EAAmBF,IAAnB;AAHH,EAAP;AAKA;;AAED,SAASC,SAAT,CAAmBD,IAAnB,EAAyB;AACxB,QAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCD;AACA,EAFM,CAAP;AAGA;;AAED,SAASH,KAAT,CAAeH,IAAf,EAAqB;AACpB,QAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCP,OAAKN,OAAL,CAAac,MAAb,CAAoBR,KAAKL,aAAL,CAAmBK,KAAKJ,aAAxB,CAApB,EAA4Da,aAAaT,IAAb,CAA5D;AACAM;AACA,EAHM,CAAP;AAIA;;AAED,SAASF,OAAT,CAAiBJ,IAAjB,EAAuB;AACtB,QAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvCP,OAAKN,OAAL,CAAac,MAAb,CAAoB,IAApB,EAA0BC,aAAaT,IAAb,CAA1B,EADuC,CACQ;AAC/CM;AACA,EAHM,CAAP;AAIA;;AAED,SAASG,YAAT,CAAsBT,IAAtB,EAA4B;AAC3B,KAAMU,KAAKV,KAAKH,gBAAL,EAAX;AACA,KAAI,CAACa,EAAL,EAAS;AACR,QAAM,IAAIX,KAAJ,oFAAN;AACA;;AAED,QAAOW,EAAP;AACA","file":"single-spa-inferno.js","sourcesContent":["const defaultOpts = {\n\t// required opts\n\tInferno: null,\n\tcreateElement: null,\n\trootComponent: null,\n\tdomElementGetter: null,\n}\n\nexport default function singleSpaInferno(userOpts) {\n\tif (typeof userOpts !== 'object') {\n\t\tthrow new Error(`single-spa-inferno requires a configuration object`);\n\t}\n\n\tconst opts = {\n\t\t...defaultOpts,\n\t\t...userOpts,\n\t};\n\n\tif (!opts.Inferno) {\n\t\tthrow new Error(`single-spa-inferno must be passed opts.Inferno`);\n\t}\n\n\tif (!opts.createElement) {\n\t\tthrow new Error(`single-spa-inferno must be passed opts.createElement`);\n\t}\n\n\tif (!opts.rootComponent) {\n\t\tthrow new Error(`single-spa-inferno must be passed opts.rootComponent`);\n\t}\n\n\tif (!opts.domElementGetter) {\n\t\tthrow new Error(`single-spa-inferno must be passed opts.domElementGetter function`);\n\t}\n\n\treturn {\n\t\tbootstrap: bootstrap.bind(null, opts),\n\t\tmount: mount.bind(null, opts),\n\t\tunmount: unmount.bind(null, opts),\n\t};\n}\n\nfunction bootstrap(opts) {\n\treturn new Promise((resolve, reject) => {\n\t\tresolve();\n\t});\n}\n\nfunction mount(opts) {\n\treturn new Promise((resolve, reject) => {\n\t\topts.Inferno.render(opts.createElement(opts.rootComponent), getRootDomEl(opts));\n\t\tresolve();\n\t});\n}\n\nfunction unmount(opts) {\n\treturn new Promise((resolve, reject) => {\n\t\topts.Inferno.render(null, getRootDomEl(opts)); // see https://github.com/infernojs/inferno/issues/114\n\t\tresolve();\n\t});\n}\n\nfunction getRootDomEl(opts) {\n\tconst el = opts.domElementGetter();\n\tif (!el) {\n\t\tthrow new Error(`single-spa-inferno: domElementGetter function did not return a valid dom element`);\n\t}\n\n\treturn el;\n}"]}