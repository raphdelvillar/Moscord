'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = singleSpaSvelte;
var defaultOpts = {
	// required opts
	component: null,
	domElementGetter: null,
	data: null
};

function singleSpaSvelte(userOpts) {
	if ((typeof userOpts === 'undefined' ? 'undefined' : _typeof(userOpts)) !== 'object') {
		throw new Error('single-spa-svelte requires a configuration object');
	}

	var opts = _extends({}, defaultOpts, userOpts);

	if (!opts.component) {
		throw new Error('single-spa-svelte must be passed opts.component');
	}

	if (!opts.domElementGetter) {
		throw new Error('single-spa-svelte must be passed opts.domElementGetter');
	}

	// Just a shared object to store the mounted object state
	var mountedInstances = {};

	return {
		bootstrap: bootstrap.bind(null, opts, mountedInstances),
		mount: mount.bind(null, opts, mountedInstances),
		unmount: unmount.bind(null, opts, mountedInstances)
	};
}

function bootstrap(opts) {
	return Promise.resolve();
}

function mount(opts, mountedInstances) {
	return new Promise(function (resolve, reject) {
		mountedInstances.instance = new opts.component({
			target: opts.domElementGetter(),
			data: opts.data || {}
		});
		resolve();
	});
}

function unmount(opts, mountedInstances) {
	return new Promise(function (resolve, reject) {
		mountedInstances.instance.teardown();
		resolve();
	});
}